AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  L2 Blue Print - Proxy with Auto Scaling Group and Application Load Balancer in Public Subnet

Parameters:

  KeyName:
    Type: String
    Description: Name of RSA key for EC2 access for testing only.
    Default: ''

  ASGMinSize:
    Description: Minimum number of instances in ASG
    Type: Number
    Default: 1

  ASGMaxSize:
    Description: Maximum number of instances in ASG
    Type: Number
    Default: 3

  ASGDesiredCapacity:
    Description: Desired number of instances in ASG
    Type: Number
    Default: 1

  VpcId:
    Description: VPC where resources will be provisioned
    Type: "AWS::EC2::VPC::Id"

  PublicSubnetIDs:
    Description: Public SubnetIDs where the Application LoadBalancer will be placed (Select min 2, max 3)
    Type: "List<AWS::EC2::Subnet::Id>"

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c3.large
    - c3.xlarge
    - c4.large
    ConstraintDescription: must be a valid EC2 instance type.

  ProxyPort:
    Type: String
    Default: 3128
    Description: Proxy port

  AllowedClientCIDR:
    Description: The client network CIDR allowed to access the service. The allowed block size is between a /32 netmask and /8 netmask
    Type: String
    Default: 0.0.0.0/0

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: Default latest Amazon Linux2 AMI.

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: Proxy parameter
      Parameters:
      - ProxyPort
      - InstanceType
      - LatestAmiId
      - KeyName
      - ASGMinSize
      - ASGMaxSize
      - ASGDesiredCapacity

    - Label:
        default: Network parameter
      Parameters:
      - VpcId
      - PublicSubnetIDs
      - AllowedClientCIDR

    ParameterLabels:
      ProxyPort:
        default: Proxy Port
      InstanceType:
        default: Instance Type
      LatestAmiId:
        default: AMI ID
      KeyName:
        default: SSH Key name
      ASGMinSize:
        default: Minimum instance count
      ASGMaxSize:
        default: Maximum instance count
      ASGDesiredCapacity:
        default: Desired instance count
      VpcId:
        default: VPC ID
      PublicSubnetIDs:
        default: Public Subnet IDs
      AllowedClientCIDR:
        default: Allowed client CIDR


Conditions:

  AddSSHKey: !Not
   - !Equals
     - ''
     - !Ref KeyName


Resources:

  B2BProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "B2BProxyRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  B2BProxyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Name: !Sub "${AWS::StackName}-B2BProxyALB"
      Subnets: !Ref PublicSubnetIDs
      SecurityGroups:
        - !Ref B2BProxyALBSecurityGroup

  B2BProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: B2BProxyTargetGroup
      HealthCheckIntervalSeconds: 60
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPort: !Ref ProxyPort
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: "400"
      Port: !Ref ProxyPort
      Protocol: HTTP
      VpcId: !Ref VpcId

  B2BProxyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref B2BProxyTargetGroup
      LoadBalancerArn: !Ref B2BProxyALB
      Port: !Ref ProxyPort
      Protocol: HTTP

  B2BProxyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      InstanceProfileName: !Sub "${AWS::StackName}-B2BProxyInstanceProfile"
      Roles:
        - !Ref B2BProxyRole

  B2BProxyALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow client access to B2BProxyALB
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - CidrIp: !Ref AllowedClientCIDR
        FromPort: !Ref ProxyPort
        ToPort: !Ref ProxyPort
        IpProtocol: tcp

  B2BProxyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ELB access to Proxy EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref ProxyPort
        ToPort: !Ref ProxyPort
        SourceSecurityGroupId: !Ref B2BProxyALBSecurityGroup

  B2BProxyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnetIDs
      Cooldown: 120
      LaunchConfigurationName: !Ref B2BProxyLaunchConfig
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs:
        - Ref: B2BProxyTargetGroup
      TerminationPolicies:
      - OldestInstance
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value: B2BProxyASG
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: '1'
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: 'true'
        SuspendProcesses:
        - ScheduledActions

  B2BProxyLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Configures B2B Proxy Instance
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
                interval=5
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.B2BProxyLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource B2BProxyLaunchConfig --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
    Properties:
      AssociatePublicIpAddress: True
      ImageId:  !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !If
         - AddSSHKey
         - !Ref KeyName
         - !Ref "AWS::NoValue"
      SecurityGroups:
      - !Ref B2BProxyEC2SecurityGroup
      IamInstanceProfile:
        Ref: B2BProxyInstanceProfile
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash -xe



            # Install AWS CLI
            yum install -y awscli

            # Install AWS CloudFormation bootstrap scripts
            yum install -y aws-cfn-bootstrap

            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r B2BProxyLaunchConfig --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

            # Start up the cfn-hup daemon to listen for changes to the launch configuration metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

            # Install squid
            yum install -y squid

            # Generate dummy certificate
            openssl req -x509 -newkey rsa:4096 -keyout /etc/squid/cert.pem -out /etc/squid/cert.pem -days 3650 -subj "/C=AU/ST=NSW/L=squid/O=squid/CN=squid" -nodes

            # Start squid
            systemctl start squid

            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource B2BProxyASG --region ${AWS::Region}
            echo "Userdata execution completed"

Outputs:

  B2BProxyALBFQDN:
    Description: ALB FQDN to be used by clients
    Value: !GetAtt B2BProxyALB.DNSName

  ProxyPort:
    Description: Proxy Port
    Value: !Ref ProxyPort

  ProxyURL:
    Description: Proxy URL
    Value: !Sub "http://${B2BProxyALB.DNSName}:${ProxyPort}"

  ProxySettings:
    Description: Copy and paste to your shell to set the proxy
    Value: !Sub "export http_proxy=http://${B2BProxyALB.DNSName}:${ProxyPort} && export https_proxy=$http_proxy"
