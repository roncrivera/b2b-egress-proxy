AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  L2 Blue Print - Squid Proxy with Auto Scaling Group and Network Load Balancer

Parameters:

  KeyName:
    Type: String
    Description: Name of RSA key for EC2 access for testing only.
    Default: 'riverr1-keypair'

  ASGMinSize:
    Description: Minimum number of instances in ASG
    Type: Number
    Default: 1

  ASGMaxSize:
    Description: Maximum number of instances in ASG
    Type: Number
    Default: 3

  ASGDesiredCapacity:
    Description: Desired number of instances in ASG
    Type: Number
    Default: 1

  B2BProxyName:
    Description: B2B Proxy Name (e.g. b2b-proxy)
    Type: String

  HostedZoneName:
    Description: Hosted zone where the proxy DNS record will be created
    Type: String

  AppProxyFQDN:
    Description: Application Proxy to use (e.g. app-proxy)
    Type: String

  VpcId:
    Description: VPC where resources will be provisioned
    Type: "AWS::EC2::VPC::Id"

  PrivateSubnetIDs:
    Description: Private SubnetIDs where the Network LoadBalancer will be placed (Select min 2, max 3)
    Type: "List<AWS::EC2::Subnet::Id>"

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - c3.large
    - c3.xlarge
    - c4.large
    ConstraintDescription: must be a valid EC2 instance type.

  ProxyPort:
    Type: String
    Default: 3128
    Description: Proxy port

  AllowedClientCIDR:
    Description: The client network CIDR allowed to access the service. The allowed block size is between a /32 netmask and /8 netmask
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^[.0-9]*\/([89]|[12][0-9]|3[0-2])$

  PrivateSubnetCIDR:
    Description: The CIDR block for the PrivateSubnet. The allowed block size is between a /32 netmask and /8 netmask
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: ^[.0-9]*\/([89]|[12][0-9]|3[0-2])$

  LinuxMgmtSecurityGroup:
    Description: The security group to allow MGMT communication (e.g. jumphosts)
    Type: String

  AmiId:
    Description: AMI to use
    Type: String

  ELBAccessLogsBucket:
    Description: VPC ID from Parameter Store
    Type: String


Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: Proxy parameter
      Parameters:
      - ProxyPort
      - InstanceType
      - AmiId
      - KeyName
      - ASGMinSize
      - ASGMaxSize
      - ASGDesiredCapacity

    - Label:
        default: Network parameter
      Parameters:
      - VpcId
      - PrivateSubnetIDs
      - AllowedClientCIDR

    ParameterLabels:
      ProxyPort:
        default: Proxy Port
      InstanceType:
        default: Instance Type
      AmiId:
        default: AMI ID
      KeyName:
        default: SSH Key name
      ASGMinSize:
        default: Minimum instance count
      ASGMaxSize:
        default: Maximum instance count
      ASGDesiredCapacity:
        default: Desired instance count
      VpcId:
        default: VPC ID
      PrivateSubnetIDs:
        default: Private Subnet IDs
      AllowedClientCIDR:
        default: Allowed client CIDR


Conditions:

  AddSSHKey: !Not
   - !Equals
     - ''
     - !Ref KeyName


Resources:

  ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ProxyRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  ProxyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Type: network
      Subnets: !Ref PrivateSubnetIDs
      Tags:
        - Key: Application
          Value: Squid Proxy
        - Key: DataClassification
          Value: "Confidential"

  ProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      HealthCheckPort: !Ref ProxyPort
      HealthCheckProtocol: TCP
      Port: !Ref ProxyPort
      Protocol: TCP
      VpcId: !Ref VpcId
      TargetType: instance
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  ProxyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ProxyTargetGroup
      LoadBalancerArn: !Ref ProxyNLB
      Port: !Ref ProxyPort
      Protocol: TCP

  ProxyDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${HostedZoneName}."
      Comment: DNS name for ProxyNLB
      Name: !Sub "${B2BProxyName}.${HostedZoneName}."
      Type: CNAME
      TTL: '60'
      ResourceRecords:
        - !GetAtt ProxyNLB.DNSName

  ProxyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      InstanceProfileName: !Sub "${AWS::StackName}-ProxyInstanceProfile"
      Roles:
        - !Ref ProxyRole

  ProxyNLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Proxy
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - CidrIp: !Ref PrivateSubnetCIDR
        FromPort: !Ref ProxyPort
        ToPort: !Ref ProxyPort
        IpProtocol: tcp

  ProxyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to Proxy EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - CidrIp: !Ref AllowedClientCIDR
        FromPort: !Ref ProxyPort
        ToPort: !Ref ProxyPort
        IpProtocol: tcp

  ProxyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PrivateSubnetIDs
      Cooldown: 120
      LaunchTemplate:
        LaunchTemplateId: !Ref ProxyASGLaunchTemplate
        Version: !GetAtt ProxyASGLaunchTemplate.LatestVersionNumber
      MaxSize: !Ref ASGMaxSize
      MinSize: !Ref ASGMinSize
      DesiredCapacity: !Ref ASGDesiredCapacity
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      TargetGroupARNs:
        - Ref: ProxyTargetGroup
      TerminationPolicies:
      - OldestInstance
      Tags:
      - Key: Name
        PropagateAtLaunch: 'true'
        Value: ProxyASG-instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: !Ref ASGDesiredCapacity
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
        SuspendProcesses:
        - ScheduledActions

  ProxyASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment: Configures Proxy Instance
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=5
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ProxyASGLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ProxyASGLaunchTemplate --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-ProxyASGLaunchTemplate"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        KeyName: !If
          - AddSSHKey
          - !Ref KeyName
          - !Ref "AWS::NoValue"
        IamInstanceProfile:
          Name:
            Ref: ProxyInstanceProfile
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref ProxyEC2SecurityGroup
              - !Ref LinuxMgmtSecurityGroup
        TagSpecifications:
          - ResourceType: volume
            Tags:
              - Key: DataClassification
                Value: Confidential
          - ResourceType: instance
            Tags:
              - Key: SquidConfig
                Value: SquidConfig
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash -xe

              export http_proxy=http://${AppProxyFQDN}:3128 && export https_proxy=$http_proxy
              export no_proxy=169.254.169.254 && export NO_PROXY=$no_proxy

              # Install AWS CLI
              yum install -y awscli

              # Install AWS CFN bootstrap scripts
              yum install -y aws-cfn-bootstrap

              # Start cfn-init
              /opt/aws/bin/cfn-init --stack ${AWS::StackId} --resource ProxyASGLaunchTemplate --region ${AWS::Region} || error_exit 'Failed to run cfn-init'

              # Start up the cfn-hup daemon to listen for changes to the launch configuration metadata
              /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

              # Install squid
              yum install -y squid

              # Generate dummy certificate
              openssl req -x509 -newkey rsa:4096 -keyout /etc/squid/cert.pem -out /etc/squid/cert.pem -days 3650 -subj "/C=AU/ST=NSW/L=squid/O=squid/CN=squid" -nodes

              # Start squid
              systemctl start squid

              # All done so signal success
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ProxyASG --region ${AWS::Region}
              echo "Userdata execution completed"

Outputs:

  ProxyNLBFQDN:
    Description: NLB FQDN to be used by clients
    Value: !GetAtt ProxyNLB.DNSName

  ProxyPort:
    Description: Proxy Port
    Value: !Ref ProxyPort

  ProxyURL:
    Description: Proxy URL
    Value: !Sub "http://${ProxyDNSRecord}:${ProxyPort}"

  ProxySettings:
    Description: Copy and paste to your shell to set the proxy
    Value: !Sub "export http_proxy=http://${ProxyDNSRecord}:${ProxyPort} && export https_proxy=$http_proxy"
